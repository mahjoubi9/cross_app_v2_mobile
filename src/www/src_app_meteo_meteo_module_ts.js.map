{"version":3,"file":"src_app_meteo_meteo_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEd;AAEzC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kDAAS;KACrB;CACF,CAAC;IAMW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAJlC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBM;AACM;AACF;AAEA;AAEmB;AAEvB;IAW5B,eAAe,SAAf,eAAe;CAAG;AAAlB,eAAe;IAT3B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,yEAAsB;SACvB;QACD,YAAY,EAAE,CAAC,kDAAS,CAAC;KAC1B,CAAC;GACW,eAAe,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACnBsB;AAEK;IAO1C,SAAS,SAAT,SAAS;IAIpB,YAAoB,aAA0B;QAA1B,kBAAa,GAAb,aAAa,CAAa;IAAI,CAAC;IAEnD,QAAQ;IACR,CAAC;IAED,WAAW;QACb,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;aACvC,SAAS,CAAC,IAAI,CAAC,EAAE;YAChB,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,EAAC,KAAK,GAAE;YACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;IACC,CAAC;CACF;;YAzBO,iEAAY;;AAOP,SAAS;IALrB,wDAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,+LAAgC;;KAEjC,CAAC;GACW,SAAS,CAkBrB;AAlBqB;;;;;;;;;;;;;;;;;;;ACTqB;AACK;IAKnC,YAAY,SAAZ,YAAY;IAEvB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IAExC,QAAQ;IACR,CAAC;IAED,YAAY,CAAC,IAAI;QAChB,OAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qDAAqD,GAAC,IAAI,GAAC,yCAAyC,CAAC;IAE5H,CAAC;CACF;;YAhBO,4DAAU;;AAKL,YAAY;IAHxB,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,YAAY,CAWxB;AAXwB;;;;;;;;;;;;;;;ACNzB,iEAAe,2pBAA2pB,qBAAqB,gEAAgE,wBAAwB,kGAAkG,0BAA0B,4DAA4D,0BAA0B,wGAAwG,2BAA2B,mTAAmT,mBAAmB,4HAA4H,mCAAmC,gGAAgG,uCAAuC,8BAA8B,uCAAuC,kGAAkG,+BAA+B,0BAA0B,8BAA8B,wKAAwK","sources":["./src/app/meteo/meteo-routing.module.ts","./src/app/meteo/meteo.module.ts","./src/app/meteo/meteo.page.ts","./src/app/services/meteo.service.ts","./src/app/meteo/meteo.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MeteoPage } from './meteo.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MeteoPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MeteoPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MeteoPageRoutingModule } from './meteo-routing.module';\n\nimport { MeteoPage } from './meteo.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MeteoPageRoutingModule\n  ],\n  declarations: [MeteoPage]\n})\nexport class MeteoPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {MeteoService} from \"../services/meteo.service\";\n\n@Component({\n  selector: 'app-meteo',\n  templateUrl: './meteo.page.html',\n  styleUrls: ['./meteo.page.scss'],\n})\nexport class MeteoPage implements OnInit {\n\n  public city;\n  private dataMeteo;\n  constructor(private meteosService:MeteoService) { }\n\n  ngOnInit() {\n  }\n\n  onLoadMeteo() {\nthis.meteosService.getMeteoData(this.city)\n  .subscribe(data => {\n    this.dataMeteo=data;\n    console.log(data);\n  }),error=>{\n  console.log(error);\n}\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeteoService {\n\n  constructor(private http:HttpClient) { }\n\n  ngOnInit() {\n  }\n\n  getMeteoData(city) {\n   return  this.http.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+city+\"&appid=8690f7c511a1553026d1bd72cb190b4b\")\n\n  }\n}\n","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button slot=\\\"start\\\">\\n      <ion-menu-button ></ion-menu-button>\\n    </ion-button>\\n    <ion-title>\\n      Meteo\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <ion-item>\\n        <ion-label>Ville : </ion-label>\\n        <ion-input type=\\\"text\\\" [(ngModel)]=\\\"city\\\"></ion-input>\\n        <ion-button (click)=\\\"onLoadMeteo()\\\">OK</ion-button>\\n      </ion-item>\\n    </ion-card-content>\\n  </ion-card>\\n  <ion-card *ngIf=\\\"dataMeteo\\\">\\n    <ion-card-content>\\n      <ion-item>\\n        <ion-label>City :  <strong>{{dataMeteo.city.name}}</strong> </ion-label>\\n        <ion-label>Country :  <strong>{{dataMeteo.city.country}}</strong> </ion-label>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Long :  <strong>{{dataMeteo.city.coord.lon}}</strong> </ion-label>\\n        <ion-label>Lat :  <strong>{{dataMeteo.city.coord.lat}}</strong> </ion-label>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Population :  <strong>{{dataMeteo.city.population}}</strong> </ion-label>\\n\\n      </ion-item>\\n    </ion-card-content>\\n  </ion-card>\\n  <ion-card *ngIf=\\\"dataMeteo\\\">\\n    <ion-card-content>\\n      <ion-list>\\n          <ion-item *ngFor=\\\"let m of dataMeteo.list\\\">\\n            <ion-avatar slot=\\\"start\\\">\\n            <ion-img src=\\\"./../assets/images/{{m.weather[0].main}}.jpg\\\"></ion-img>\\n            </ion-avatar>\\n            <ion-list>\\n              <ion-item>\\n                <strong>  {{m.dt*1000|date:'dd/MM/yyyy-HH-mm'}}</strong>\\n              </ion-item>\\n              <ion-item>\\n                Min :<strong> {{m.main.temp_min -273.15|number:'0.0'}} C°</strong> , Max : <strong>{{m.main.temp_max -273.15|number:'0.0'}} C°</strong>\\n              </ion-item>\\n              <ion-item>\\n                pre : <strong>{{m.main.pressure|number:'0.0'}} </strong>,Hum : <strong>{{m.main.humidity|number:'0.0'}}</strong>\\n              </ion-item>\\n\\n            </ion-list>\\n          </ion-item>\\n\\n\\n      </ion-list>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";"],"names":[],"sourceRoot":"webpack:///"}